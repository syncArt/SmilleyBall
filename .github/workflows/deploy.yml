name: Deploy Smileyball Frontend

on:
  workflow_dispatch:  # Workflow uruchamiany tylko rÄ™cznie

jobs:
  deploy-smileyball:
    runs-on: ubuntu-latest
    environment: production
    env:
      SMILEYBALL_CANISTER_ID: ${{ secrets.SMILEYBALL_CANISTER_ID }}
      WALLET_CANISTER_ID: ${{ secrets.WALLET_CANISTER_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install dfx
        uses: dfinity/setup-dfx@main

      - name: Confirm successful installation
        run: dfx --version
        
      - name: Check Rust and Cargo versions
        run: |
          rustc --version
          cargo --version

      - name: Install wasm32-unknown-unknown target for Rust
        run: rustup target add wasm32-unknown-unknown
        
      - name: Install Smileyball Identity
        env:
          DFX_DEPLOY_KEY: ${{ secrets.DFX_DEPLOY_KEY }}
        run: |
          key_pem=$(mktemp)
          printenv "DFX_DEPLOY_KEY" > "$key_pem"
          dfx identity import --disable-encryption --force smileyball "$key_pem"
          rm "$key_pem"

      - name: Start DFX server in the background
        run: |
          nohup dfx start --background --clean --emulator &
          # Wait until DFX is ready
          until dfx ping; do sleep 1; done
          
      - name: Create Canisters
        run: dfx canister create --all
        
      - name: Build all canisters including dependencies
        run: dfx build

      - name: Deploy Smileyball Frontend
        run: |
          wallet="${{ env.WALLET_CANISTER_ID }}"
          dfx canister --network ic --wallet "$wallet" install --mode upgrade \
            --wasm .dfx/local/canisters/smileyball_frontend/smileyball_frontend.wasm.gz \
            ${{ env.SMILEYBALL_CANISTER_ID }}

      - name: Stop DFX server and clean up processes
        run: |
          dfx stop || true 
          pkill -f 'dfx start' || true 
          pkill -f 'dfx replica' || true 

      - name: Clean up .dfx folder
        run: |
          rm -rf .dfx
